# -*- coding: utf-8 -*-
"""2231_226470307032.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12M5IVURStsT3Lg1J4FCM_l-YAK9VkWPY

**PRACTICAL-1**

**PRACTICAL-2**
"""

#PRACTICAL-2
name = input("Enter your name = ")
contact_number = input("Enter your contact number = ")
email = input("Enter your email address = ")
birthdate = input("Enter your birthdate = ")
# Print the user's details on the screen.
print("Your name is", name)
print("Your contact number is", contact_number)
print("Your email address is", email)
print("Your birthdate is", birthdate)

"""**PRACTICAL-3(A)**"""

#PRACTICAL-3(A)

# Input temperature in Celsius
celsius = float(input("Enter temperature in Celsius: "))
fahrenheit = (celsius * 9/5) + 32
# Print the result
print(f"{celsius} degrees Celsius is equal to {fahrenheit:.2f} degrees Fahrenheit")

"""**PRACTICAL-3(B)**

"""

#PRACTICAL-3(B)

# Input the coordinates of two points
x1 = float(input("Enter x1: "))
y1 = float(input("Enter y1: "))
x2 = float(input("Enter x2: "))
y2 = float(input("Enter y2: "))

# Compute the slope
if x2 - x1 != 0:  # Check if the denominator is not zero
    slope = (y2 - y1) / (x2 - x1)
    print(f"The slope of the line between ({x1}, {y1}) and ({x2}, {y2}) is {slope:.2f}")
else:
    print("The slope is undefined because x2 - x1 is zero (vertical line).")

"""**PRACTICAL-3(C)**"""

#PRACTICAL-3(C)

# Function to calculate Simple Interest
def calculate_simple_interest(principal, rate, time):
    simple_interest = (principal * rate * time) / 100
    return simple_interest

# Function to calculate Compound Interest
def calculate_compound_interest(principal, rate, time):
    n = 1
    compound_interest = principal * (pow(1 + (rate / (100 * n)), n * time) - 1)
    return compound_interest

# Input principal amount, rate of interest, and time
principal = float(input("Enter the principal amount: "))
rate = float(input("Enter the annual interest rate (%): "))
time = float(input("Enter the time period (in years): "))

# Calculate Simple Interest and Compound Interest
simple_interest = calculate_simple_interest(principal, rate, time)
compound_interest = calculate_compound_interest(principal, rate, time)

# Print the results
print(f"Principal Amount: ₹{principal}")
print(f"Rate of Interest: {rate}%")
print(f"Time Period: {time} years")
print(f"Simple Interest: ₹{simple_interest:.2f}")
print(f"Compound Interest: ₹{compound_interest:.2f}")

"""**PRACTICAL-3(D)**"""

# Constants for the value of each coin
QUARTER_VALUE = 0.25
DIME_VALUE = 0.10
NICKEL_VALUE = 0.05
PENNY_VALUE = 0.01

# Input the number of each coin
quarters = int(input("Enter the number of quarters: "))
dimes = int(input("Enter the number of dimes: "))
nickels = int(input("Enter the number of nickels: "))
pennies = int(input("Enter the number of pennies: "))

# Calculate the total value of change in dollars
total_value = (quarters * QUARTER_VALUE) + (dimes * DIME_VALUE) + (nickels * NICKEL_VALUE) + (pennies * PENNY_VALUE)

# Print the total value in dollars
print(f"The total value of change is ${total_value:.3f}")

"""**PRACTICAL-3(E)**"""

#PRACTICAL-3(E)

# Input three numbers
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
num3 = float(input("Enter the third number: "))

# Use the ternary operator to find the maximum
max_num = num1 if (num1 > num2 and num1 > num3) else (num2 if num2 > num3 else num3)

# Print the maximum number
print(f"The First number is = {num1}")
print(f"The Second number is = {num2}")
print(f"The Thrid number is = {num3}")
print(f"The maximum number among all the number is = {max_num}")

"""**PRACTICAL-3(F)**"""

#PRACTICAL-3(F)

import math

# Input the radius of the sphere
radius = float(input("Enter the radius of the sphere: "))

# Calculate the area of the sphere
area = 4 * math.pi * (radius ** 2)

# Calculate the volume of the sphere
volume = (4/3) * math.pi * (radius ** 3)

# Print the results
print(f"The area of the sphere is {area:.2f} square units")
print(f"The volume of the sphere is {volume:.2f} cubic units")

"""**PRACTICAL-3(G)**"""

#PRACTICAL-3(G)

import math
a=int(input("Enter the first value: "))
b=int(input("Enter the second value: "))
c=int(input("Enter the third value: "))
discriminant=(b**2)-4*a*c
print("Value of disrciminant is : ",discriminant)
Real_roots1=(-b+math.sqrt(discriminant)/(2*a))
Real_roots2=(-b-math.sqrt(discriminant)/(2*a))
print("Real roots of quadratic equation are : ",Real_roots1,Real_roots2)

"""**PRACTICAL-3(H)**"""

#PRACTICAL-3(H)

import math
angle=float(input("Enter the angle of ladder: "))
height=float(input("Enter the height of house: "))
angle_of_ladder=math.sin(angle)
hypotenous=height/angle_of_ladder
print("Required length of ladder is: ",hypotenous)

"""**PRACTICAL-4(A)**"""

#PRACTICAL-4(A)

def is_leap_year(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else:
        return False

# Input year from the user
year = int(input("Enter a year: "))

if is_leap_year(year):
    print(year, "is a leap year.")
else:
    print(year, "is not a leap year.")

"""**PRACTICAL-4(B)**"""

#PRACTICAL-4(B)

def calculate_wages(hours_worked, hourly_rate):
    if hours_worked <= 40:
        total_wages = hours_worked * hourly_rate
    else:
        regular_wages = 40 * hourly_rate
        overtime_hours = hours_worked - 40
        overtime_pay = overtime_hours * (hourly_rate * 1.5)
        total_wages = regular_wages + overtime_pay
    return total_wages

# Input the number of hours worked and hourly rate
hours_worked = float(input("Enter the number of hours worked: "))
hourly_rate = float(input("Enter the hourly rate: "))

total_wages = calculate_wages(hours_worked, hourly_rate)
print("Total wages for the week: $", total_wages)

"""**PRACTICAL-4(C)**"""

#PRACTICAL-4(C)

kg=int(input("enter the weight of the person "))
h=int(input("enter the height of the person(in cm) "))
m=h/100
bmi=kg/pow(m,2)
print("BMI is ",round(bmi,0))
if(bmi >=19 and bmi <=25):
  print("the person is healthy")
elif(bmi <19 and bmi >=0):
  print("the person is underweight")
elif(bmi>25 and bmi<200):
  print("the person is overweight")
else:print("the data which is entered is invalid")

"""**PRACTICAL-4(D)**"""

#PRACTICAL-4(D)

# Get the student's marks.
marks = int(input("Enter your marks: "))

# Assign a grade to the student.
grade = ""
if marks >= 90:
  grade = "A"
elif marks >= 80 and marks < 90:
  grade = "B"
elif marks >= 70 and marks < 80:
  grade = "C"
elif marks >= 60 and marks < 70:
  grade = "D"
elif marks >= 50 and marks < 60:
  grade = "E"
else:
  grade = "F"

# Print the student's grade.
print("Your grade is:", grade)

"""**PRACTICAL-5(A)**"""

#PRACTICAL-5(A)

# Get the number of numbers to read from the user.
n = int(input("Enter the number of numbers to read: "))

# Create a list to store the numbers.
numbers = []

# Read the numbers from the user.
for i in range(n):
    number = int(input("Enter a number: "))
    numbers.append(number)

# Calculate the average of the numbers.
average = sum(numbers) / n

# Print the average.
print("The average of the numbers is:", average)

"""**PRACTICAL-5(B)**"""

#PRACTICAL-5(B)

n=5
k=n-1
for i in range(0,n):
  for j in range(0,k):
    print(end=" ")
  k = k-1
  for q in range(0,i+1):
    print("*",end=" ")
  print( )

"""**PRACTICAL-5(C)**"""

#PRACTICAL-5(C)

for i in range(1, 6):

    # Print the numbers from 1 to i.
    for j in range(1, i + 1):
        print(j, end="")

    # Print a newline.
    print()

"""**PRACTICAL-5(D)**"""

#PRACTICAL-5(D)

def sum_series(n):
  """Calculates the sum of the series 1/3 + 3/5 + 5/7 + ... + 95/97 + 97/99."""
  sum = 0
  for i in range(1, n+1, 2):
    sum += i / (i + 2)
  return sum
print(sum_series(98))

"""**PRACTICAL-5(E)**"""

#PRACTICAL-5(E)

def is_perfect(number):
   sum=0;
   for divisior in range(1,number):
     if (number % divisior == 0):
       sum=sum+divisior
   return sum == number
for number in range(1,10001):
    if(is_perfect(number)):
      print(number)

"""**PRACTICAL-6(A)**"""

#PRACTICAL-6(A)

list=[10,20,30,15,48,90,60,32,5]
list.append(70)
print("Element added successfully")
print("List after adding element: ",list)
list.remove(48)
print("Element removed successfully")
print("List after removing element: ",list)
print("Number of elements in the list are: ",len(list))
print("Element access using list is: ",list[2])
list.sort()
print("Sorted list is: ",list)
list.reverse()
print("Reversed list is: ",list)

"""**PRACTICAL-6(B)**"""

#PRACTICAL-6(B)

list1=[]
n = int(input("Enter the Total element = "))
for i in range(0,n):
  i = int(input("Enter element of your choice =  "))
  list1.append(i)
print(list1)
count = 0
total_sum = 0
for i in list1:
  if i>0:
    count=count+1
print("Positive number count = ",count)
count = 0
for i in list1:
  if i<0:
    count=count+1
print("Negative number count = ",count)
count = 0
for i in list1:
  if i==0:
    count=count+1
print("Zero number count = ",count)
count = 0
for i in list1:
  if i %2==0:
    count=count+1
print("Even number count = ",count)
count = 0
for i in list1:
  if i %2!=0:
    count=count+1
print("Odd number count = ",count)
for i in list1:
 total_sum += i  # Add the element to the sum
average = total_sum / n
print("Average count of total element = ",average)

"""**PRACTICAL-6(C)**"""

#PRACTICAL-6(C)

str1=input("Enter the element = ")
for i in range(0,10):
  n=str1.count(str(i))
  print(i,"is occurn",n,"time")

"""**PRACTICAL-6(D)**"""

#PRACTICAL-6(D)

num1=[1,1,1,1,2,2,2,3,3,3]
num2=[]
for i in num1:
  if i not in num2:
    num2.append(i)
print("List after eliminating duplicate values in the list is = ", num2)

"""**PRACTICAL-6(E)**"""

#PRACTICAL-6(E)

temp=[34,40,29,33,42,37,39]
for i in temp:
  mx=max(temp)
  mn=min(temp)
  a=temp.index(mx)
  b=temp.index(mn)
  temp[a],temp[b]=temp[b],temp[a]
print("Temperatures after swapping is: ",temp)

"""**PRACTICAL-7(A)**"""

#PRACTICAL-7(A)

tup=("Khush",32,12.50,True)
print(tup)
n_list=list(tup)
print("Tuple after converting into the list is: ")
print(n_list)
n_list.remove(12.50)
print("List after removing 1 element: ")
print(n_list)
n_tupple=print(tuple(n_list))

"""**PRACTICAL-7(B)**"""

#PRACTICAL-7(B)

country={"India","America","Norway","France","Europe"}
continent={"Asia","North America","Australia","Europe"}
print("Country added before operations = ",country)
print("Continent added before operations = ",continent)
subset={"India","Norway"}
country.remove("France")
print("Set after removing an element = ",country)
continent.add("Africa")
print("Set after adding an element = ",continent)
print("Set after performing union operations = ")
print(continent.union(country))
print("Set after performing intersection operations = ")
print(continent.intersection(country))
print("Set after performing difference operations = ")
print(continent.difference(country))
print("Set after performing symmetric difference operation = ")
print(continent.symmetric_difference(country))
print("Set after performing sub-set operation = ")
print(subset.issubset(country))

"""**PRACTICAL-7(C)**

"""

#PRACTICAL-7(C)

dic={"Name":"Khush","Er.No.":"226470307032","Department":"Computer Engineering"}
print(dic)
#Add key-value pair operation
dic["SPI"]="09.00"
print("Dictionary after adding key-value pair: ",dic)
#Remove key-value pair operation
temp=dic.pop("Department")
print("The deleted element in dictionary: ",temp)
print("Dictionary after removing key-value pair: ",dic)
for key,values in dic.items():
  print(key,"->",values)
dic2={"Name":"xyz","Er.No.":"226470307000","Department":"Computer Engineering"}
print(dic2)
dic2["SPI"]="08.52"
print("Dictionary after adding key-value pair: ",dic2)
temp2=dic2.pop("Department")
print("The deleted element in dictionary: ",temp2)
print("Dictionary after removing key-value pair: ",dic2)
print({**dic,**dic2})

"""**PRACTICAL-7(D)**"""

#PRACTICAL-7(D)

d1={"SUNDAY":40,'MONDAY':41,'TUESDAY':49,'WEDNESDAY':55,'THRUSDAY':44,'FRIDAY':32,'SATURDAY':42}
for day,temp in d1.items():
 if temp>=40 and temp<=50:
  print(day)

"""**PRACTICAL-7(E)**"""

#PRACTICAL-7(E)

my_dic={1:"Banana",2:"Apple",3:"Cherry",4:"Mango"}
key=int(input("Enter the key: "))
temp=0
if key in my_dic:
  temp=my_dic.pop(key)
  print("The popped key is: ",temp)
else:
  value=input("Enter the value of key: ")
  my_dic[key]=value
  print(my_dic)

"""**PRACTICAL-8(A)**"""

#PRACTICAL-8(A)

import random
original_list=[]
n=int(input("Enter the number of element you want to insert in the list: "))
for i in range(0,n):
  i=int(input("Enter the elements of list: "))
  original_list.append(i)
print("Original List :",original_list)
random.shuffle(original_list)
print("Shuffled List:",original_list)

"""**PRACTICAL-8(B**)"""

#PRACTICAL-8(B)

list1=[]
list2=[]
n=int(input("Enter the number of element :- "))
for i in range(0,n):
  i=int(input("Enter the element :- "))
  list1.append(i)
for item in list1:
  if item not in list2:
    list2.append(item)
print("Original List:", list1)
print("List with Duplicates Removed:", list2)

"""**PRACTICAL-8(C)**"""

#PRACTICAL-8(C)

def loan():
  p=int(input("Enter the amount: "))
  r=int(input("Enter the rate of intrest: "))
  t=int(input("Enter the no of years: "))

  total_int= round(p*r*t)/100
  total_amt= round(p+total_int)
  emi=round(total_amt/(12*t))

  print("Intrest: ",total_int)
  print("Amount: ",total_amt)
  print("EMI: ",emi)

  print("\nPrincipal EMI Intrest Balance")
  balance=total_amt-emi
  print(total_amt,"\t",emi,"\t",r,"\t",balance)

  for i in range (1,t*12):
    total_amt=balance
    balance=total_amt-emi
    print(total_amt,"\t",emi,"\t",r,"\t",balance)
loan()

"""**PRACTICAL-9(A)**"""

#PRACTICAL-9(A)

def mean(number):
  return sum(number)/len(number)
def deviation(number):
  mean_val=mean(number)
  variances=[(x-mean_val)**2 for x in number]
  return(sum(variances)/len(number)-1)**0.5

number=[1,2,3,4,5]
mean_val=mean(number)
dev_val=deviation(number)
print("List:",number)
print("Mean is",mean_val)
print("Deviation is",dev_val)

"""**PRACTICAL-9(B)**"""

#PRACTICAL-9(B)

from datetime import date,timedelta
def altsunday(year):
  d=date(year,1,1)
  d+= timedelta(days=6-d.weekday())
  while d.year==year:
    yield d
    d+=timedelta(days=7)
m = int(input("Enter the year = "))
for d in altsunday(m):
  print(d)

"""**PRACTICAL-9(C)**"""

#PRACTICAL-9(C)

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-5, 6, 100)

def relu(x):
    return np.maximum(0, x)
y = relu(x)

plt.figure(figsize=(8,6))
plt.plot(x, y, label='ReLU Function', color='olive')
plt.axhline(0, color='gray', linestyle='--', linewidth=0.5)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.5)
plt.xlabel('x')
plt.ylabel('ReLU(x)')
plt.title('ReLU Function')
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.show()

"""**PRACTICAL-9(D)**"""

#PRACTICAL-9(D)

import random
import matplotlib.pyplot as plt

# Generate random marks for 100 students (between 0 and 10)
num_students = 100
student_marks = [random.uniform(0, 10) for _ in range(num_students)]

# Create a histogram
plt.hist(student_marks, bins=11, range=(0, 10), edgecolor='black', alpha=0.7)
plt.title('Test Results Histogram')
plt.xlabel('Marks')
plt.ylabel('Number of Students')
plt.xticks(range(11))
plt.grid(axis='y', alpha=0.75)

# Display the histogram
plt.show()

"""**PRACTICAL-9(E)**"""

#PRACTICAL-9(E)

#def calc():
def add(n1,n2):
  return n1+n2
def subtract(n1,n2):
  return n1-n2
def multiply(n1,n2):
  return n1*n2
def divide(n1,n2):
  return n1/n2
def modulo(n1,n2):
  return n1%n2
##import calc as c
n1=int(input("Enter the first number: "))
n2=int(input("Enter the second number: "))
print("Addition: ",add(n1,n2))
print("Subtration: ",subtract(n1,n2))
print("Multiplication: ",multiply(n1,n2))
print("Division: ",divide(n1,n2))
print("Modulo: ",modulo(n1,n2))

"""**PRACTICAL-10(A)**"""

#PRACTICAL-10(A)

mystr=str(input("Enter the String :"))
revstr=reversed(mystr)
if list(mystr)==list(revstr):
  print("String is Palindrome")
else:
  print("String in not Palindrome")

"""**PRACTICAL-10(B)**

"""

#PRACTICAL-10(B)

def vc_count(mystr):
  v=0
  c=0
  for i in mystr:
    if(i=='A' or i=='E' or i=='I' or i=='O' or i=='U' or i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):
      v=v+1
    else:
      c=c+1
  return(v,c)

mystr=str(input("Enter the string :"))
print(vc_count(mystr))

"""**PRACTICAL-10(C)**"""

#PRACTICAL-10(C)

import datetime
date=input("Enter the date in DD/MM/YYYY Format : ")
datetime.datetime.strptime(date,"%d/%m/%Y").strftime("%m-%d-%Y")

"""**PRACTICAL-10(D)**"""

#PRACTICAL-10(D)

def are_anagrams(w1,w2):

    w1 = w1.replace(" ", "").lower()
    w2 = w2.replace(" ", "").lower()
    return sorted(w1) == sorted(w2)

w1 = input("Enter the first word: ")
w2 = input("Enter the second word: ")

if are_anagrams(w1, w2):
    print(f"{w1} and {w2} are anagrams.")
else:
    print(f"{w1} and {w2} are not anagrams.")

"""**PRACTICAL-10(E)**"""

#PRACTICAL-10(E)

def RGB():
  code=input("Enter the RGB colour code: ")
  red=int(code[0:2],16)
  green=int(code[2:4],16)
  blue=int(code[4:6],16)
  print(f"Red: {red}")
  print(f"Green: {green}")
  print(f"Blue: {blue}")
RGB()

"""**PRACTICAL-10(F)**"""

#PRACTICAL-10(F)

def name_value(name):
    return sum(ord(char) - 96 for char in name.lower())

if __name__ == "__main__":
    name = input("Enter name : ")
    print("Value of name : ", name_value(name))

"""**#PRACTICAL-11(A)**"""

# Commented out IPython magic to ensure Python compatibility.
# #PRACTICAL-11(A)
# 
# %%writefile "P11.txt"
# Hello
# this is practical 11-A

#PRACTICAL-11(A)

f=open("P11.txt","r")
print(f.read())
f.close()

#PRACTICAL-11(A)

f=open("P11.txt")
b=f.readlines()
for i in b:
  print(i)

#PRACTICAL-11(A)

f=open("P11.txt","a")
f.write("Hello World")
f.close()

#PRACTICAL-11(A)

f=open("P11.txt")
print(f.read())
f.close()

#PRACTICAL-11(A)

l=["Hi","Hello","I","Am","Parin"]
f=open("P11.txt","a")
for i in l:
  print(f.write(i))
f.close()

#PRACTICAL-11(A)

f=open("P11.txt")
print(f.read())
f.close()

#PRACTICAL-11(A)

f=open("P11.txt")
c=f.readlines()
a=[]
b=[]
for i in c:
 b=i.split()
 a.extend(b)
print("no of lines",len(c))
print("no of words",len(a))

"""**PRACTICAL-11(B)**"""

#PRACTICAL-11(B)

files=input("Enter the file name :")
f=open(files,"r")
a=f.read()
from string import ascii_lowercase as alc
for i in alc:
  x=a.count(str(i))
  print(i,"is featured for ",x,"number of times")
f.close()

"""**PRACTICAL-11(C)**"""

# Commented out IPython magic to ensure Python compatibility.
# #PRACTICAL-11(C)
# 
# %%writefile "P11C.txt"
# hello
# computer department
# Today date is 16-12-2023

#PRACTICAL-11(C)

files=input("Enter the file name :")
f=open(files,"r")
a=f.read()
for i in range(10):
 x=a.count(str(i))
 print(i,"is featured for",x,"number of times in a string")

"""**PRACTICAL-11(D)**"""

#PRACTICAL-11(D)

file = open('P11C.txt', 'r')
word_count = 0
word_length = 0
sentence_count = 0
sentence_length = 0
for line in file:
  words = line.split()
for word in words:
  word_count += 1
word_length += len(word)
sentences = line.split('.')
for sentence in sentences:
  sentence_count += 1
sentence_length += len(sentence)
avg_word_length = word_length / word_count
avg_sentence_length = sentence_length / sentence_count
print("Average Word Length:", avg_word_length)
print("Average Sentence Length:", avg_sentence_length)

"""**PRACTICAL-11(E)**"""

# Commented out IPython magic to ensure Python compatibility.
# #PRACTICAL-11(E)
# 
# %%writefile "P11E.txt"
# hello
# computer department
# Today date is 16-12-2023

# Commented out IPython magic to ensure Python compatibility.
# #PRACTICAL-11(E)
# 
# %%writefile "P11E1.txt"
# hello
# computer department
# Today date is 16-12-2023

#PRACTICAL-11(E)

file1 = open("P11E.txt", "r")
file2 = open("P11E1.txt", "r")
string1 = file1.read()
string2 = file2.read()
string1 = string1.replace(" ", "")
string2 = string2.replace(" ", "")
interleaved_string = ""
for i in range(len(string1)):
  interleaved_string += string1[i] + string2[i]
print(interleaved_string)

"""**MICROPROJECT**"""

def convert_unit(value, from_unit, to_unit):
    # Conversion factors
    conversion_factors = {
        'meter': 1,
        'kilometer': 1000,
        'centimeter': 0.01,
        'millimeter': 0.001,
        'inch': 0.0254,
        'foot': 0.3048,
        'yard': 0.9144,
        'mile': 1609.34,
        'gram': 1,
        'kilogram': 1000,
        'milligram': 0.001,
        'ounce': 28.3495,
        'pound': 453.592,
        'celsius': lambda x: x,  # Celsius to Celsius conversion
        'fahrenheit': lambda x: (x - 32) * 5/9,  # Fahrenheit to Celsius
        'kelvin': lambda x: x - 273.15  # Kelvin to Celsius
    }

    try:
        # Convert to base unit
        base_value = value / conversion_factors[from_unit]

        # Convert to target unit
        result = base_value * conversion_factors[to_unit]

        return result
    except KeyError:
        return "Invalid units. Supported units are meter, kilometer, centimeter, millimeter, inch, foot, yard, mile, gram, kilogram, milligram, ounce, pound, celsius, fahrenheit, kelvin."

def main():
    print("Dynamic Unit Conversion Calculator")

    while True:
        try:
            value = float(input("Enter value to convert: "))
            from_unit = input("Enter source unit: ").lower()
            to_unit = input("Enter target unit: ").lower()

            result = convert_unit(value, from_unit, to_unit)
            print(f"{value} {from_unit} is equal to {result} {to_unit}")

        except ValueError:
            print("Invalid input. Please enter a valid numeric value.")
        except Exception as e:
            print(f"Error: {e}")

        continue_conversion = input("Do you want to perform another conversion? (yes/no): ").lower()
        if continue_conversion != 'yes':
            print("Exiting the calculator. Goodbye!")
            break

if __name__ == "__main__":
    main()

"""**EXTRA-PRACTICAL-1**"""

#EXTRA-PRACTICAL-1

number = int(input("Enter the number: "))
sum=0
for i in range(1, number+1):
 sum=sum+i
print(sum)

"""**EXTRA-PRACTICAL-2**"""

#EXTRA-PRACTICAL-2

num=int(input("Enter the number to print multiplication table: "))
for i in range(1,11):
 ans=num*i
 print(f"{num}X{i}={ans}")

"""**EXTRA-PRACTICAL-3**"""

#EXTRA-PRACTICAL-3

my_list=[1,2,3,4,5]
new_list=[]
for i in range(len(my_list)):
 new_list.insert(i,my_list[-1])
 my_list.pop(-1)
print(new_list)

#EXTRA-PRACTICAL-4

for i in range(-10,0):
 print(i)

"""**EXTRA-PRACTICAL-5**"""

#EXTRA-PRACTICAL-5

my_list=['Het','Parin','Khush','Vansh','Pal']
#Accessing specific list elements
print("Specific element: ",my_list[4])
#Negative indexing
print("Negative Indexing: ",my_list[-4] )
#Slicing
print("Sliced List: ",my_list[0:4])
#Add elements
my_list.append('Khush')
print("New list: ",my_list)
#Change list items
my_list[4]='Vansh'
print("Changed list: ",my_list)
#Remove list items
my_list.remove('Parin')
print("Updated List: ",my_list)
#Iterate through list
print("List: ")
for i in my_list:
 print(i)

"""**EXTRA-PRACTICAL-6**"""

#EXTRA-PRACTICAL-6

my_dic={'Name' : 'Khush','En.No.' : '226470307032', 'SPI' : '9.00'}
#Length Dictionary
print("Length of dictionary: ",len(my_dic))
#Accessing dictionary items
print("*****Dictionary Items*****")
for key,values in my_dic.items():
 print(key, "->" ,values)
#Change dictionary items
my_dic['SPI']=8.80
print(my_dic)
#Add items
my_dic['Department']='Computer'
print("Added dictionary: ",my_dic)
#Remove dictionary items
temp=my_dic.pop('SPI')
print("Removed dictionary: ",temp)

"""**EXTRA-PRACTICAL-7**"""

#EXTRA-PRACTICAL-7

low = int(input("Enter the lower limit: "))
high = int(input("Enter the higher limit: "))
print(f"Prime numbers between {low} and {high} are: ")
primes = []

for i in range(low, high + 1):
    flag = 0
    if i < 2:
        continue
    if i == 2:
        primes.append(2)
        continue
    for x in range(2, i):
        if i % x == 0:
            flag = 1
            break
    if flag == 0:
        primes.append(i)

print(primes)

"""**EXTRA-PRACTICAL-8**"""

#EXTRA-PRACTICAL-8

def fibonacci(n):
    fib_series = []
    a, b = 0, 1
    while len(fib_series) < n:
        fib_series.append(a)
        a, b = b, a + b
    return fib_series

n = int(input("Enter the number of terms: "))

if n < 0:
    print("Please enter a positive number.")
elif n==0:
    print("Please enter the greater number then 0")
else:
    fib_series = fibonacci(n)
    print("Fibonacci Series up to", n, "terms:")
    print(fib_series)

"""**EXTRA-PRACTICAL-9**"""

#EXTRA-PRACTICAL-9

factorial = 1
num=int(input("Enter the value: "))
if num < 0:
 print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
 print("The factorial of 0 is 1")
else:
 for i in range(1,num + 1):
  factorial = factorial*i
 print("The factorial of",num,"is",factorial)

"""**EXTRA-PRACTICAL-10**"""

#EXTRA-PRACTICAL-10

List1= []
n=int(input("Enter the number of elements you want to insert in the list: "))
for i in range(0,n):
 i=int(input("Enter the elements in the list: "))
 List1.append(i)
print('Printing the List Items at Odd Position')
print(List1[1:len(List1):2])

"""**EXTRA-PRACTICAL-11**"""

#EXTRA-PRACTICAL-11

def calculate_cubes(up_to_number):
 cubes = [i**3 for i in range(1, up_to_number + 1)]
 return cubes
# Replace 'your_number' with the desired number
your_number =int(input("Enter the number: "))
result = calculate_cubes(your_number)
for i, cube in enumerate(result, start=1):
 print(f"{i}^3 = {cube}")

"""**EXTRA-PRACTICAL-12**"""

#EXTRA-PRACTICAL-12

def reverse_integer(number):
 # Convert the number to a string, reverse it, and convert it back to an integer
 reversed_number = int(str(number)[::-1])
 return reversed_number
# Replace 'your_number' with the integer you want to reverse
your_number =int(input("Enter the number: "))
result = reverse_integer(your_number)
print(f"The reversed number is: {result}")

!apt-get install graphviz -y
!pip install graphviz